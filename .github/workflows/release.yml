name: Release

on:
  push:
    branches:
      - master
      - "feat/*"
      - "fix/*"
      - "hotfix/*"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # GitVersion needs full history

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install dependencies
        run: npm i -g pnpm && pnpm install --frozen-lockfile

      - name: Setup GitVersion
        uses: GitTools/actions/gitversion/setup@v3
        with:
          versionSpec: "5.x"

      - name: Debug GitVersion
        run: |
          ls -la .
          cat GitVersion.yml
          dotnet-gitversion /config GitVersion.yml /diag

      - name: Run GitVersion
        id: gitversion
        uses: GitTools/actions/gitversion/execute@v3
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml

      # after the Run GitVersion step (id: gitversion)
      - name: Build custom version string
        id: build_version
        run: |
          # Use the environment variables written by the GitVersion action
          MAJOR=${{ env.GitVersion_Major }}
          MINOR=${{ env.GitVersion_Minor }}
          PATCH=${{ env.GitVersion_Patch }}
          BRANCH=${{ env.GitVersion_EscapedBranchName }}
          COMMITS=${{ env.GitVersion_CommitsSinceVersionSource }}

          # Fallback if CommitsSinceVersionSource is empty
          if [ -z "$COMMITS" ]; then
            COMMITS=${{ env.GitVersion_BuildMetaData }} || true
          fi

          VERSION="${MAJOR}.${MINOR}.${PATCH}-${BRANCH}.${COMMITS}"
          echo "Built VERSION=${VERSION}"
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
        shell: bash

      - name: Update package.json version (no git tag)
        run: |
          echo "Setting package.json version to $VERSION"
        env:
          VERSION: ${{ env.VERSION }}

      # - name: Update package.json version
      #   run: |
      #     VERSION=${{ steps.gitversion.outputs.semVer }}
      #     echo "Using version $VERSION"
      #     npm version $VERSION --no-git-tag-version

      # - name: Run Semantic Release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: npx semantic-release
